/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var ChecktypeError = kurentoClient.checkType.ChecktypeError;

var HttpEndpoint = require('./abstracts/HttpEndpoint');

/**
 * Builder for the {@link module:elements.HttpGetEndpoint HttpGetEndpoint}.
 *
 * @classdesc
 *  An <code>HttpGetEndpoint</code> contains SOURCE pads for AUDIO and VIDEO, delivering media using HTML5 pseudo-streaming mechanism.
 *  
 *     This type of endpoint provide unidirectional communications. Its :rom:cls:`MediaSink` is associated with the HTTP GET method
 *
 * @extends module:elements/abstracts.HttpEndpoint
 *
 * @constructor module:elements.HttpGetEndpoint
 */
function HttpGetEndpoint(){
  HttpGetEndpoint.super_.call(this);
};
inherits(HttpGetEndpoint, HttpEndpoint);

/**
 * @alias module:elements.HttpGetEndpoint.constructorParams
 *
 * @property {external:Integer} [disconnectionTimeout]
 *  disconnection timeout in seconds.
 *  
 *  This is the time that an http endpoint will wait for a reconnection, in case an HTTP connection is lost.
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the {@link module:core.MediaPipeline MediaPipeline} to which the endpoint belongs
 *
 * @property {module:elements/complexTypes.MediaProfileSpecType} [mediaProfile]
 *  the {@link MediaProfileSpecType} (WEBM, MP4...) for the endpoint
 *
 * @property {external:Boolean} [terminateOnEOS]
 *  raise a :rom:evnt:`MediaSessionTerminated` event when the associated player raises a :rom:evnt:`EndOfStream`, and thus terminate the media session
 */
HttpGetEndpoint.constructorParams = {
  disconnectionTimeout: {
    type: 'int',
  },

  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },

  mediaProfile: {
    type: 'MediaProfileSpecType',
  },

  terminateOnEOS: {
    type: 'boolean',
  },
};

/**
 * @alias module:elements.HttpGetEndpoint.events
 *
 * @extend module:elements/abstracts.HttpEndpoint.events
 */
HttpGetEndpoint.events = HttpEndpoint.events;

module.exports = HttpGetEndpoint;

HttpGetEndpoint.check = function(key, value)
{
  if(!(value instanceof HttpGetEndpoint))
    throw ChecktypeError(key, HttpGetEndpoint, value);
};
